// src/implementations.ts
import {
  createCookieFactory,
  createCookieSessionStorageFactory,
  createMemorySessionStorageFactory,
  createSessionStorageFactory
} from "@remix-run/server-runtime";

// src/crypto.ts
var encoder = new TextEncoder();
var sign = async (value, secret) => {
  const data = encoder.encode(value);
  const key = await createKey(secret, ["sign"]);
  const signature = await crypto.subtle.sign("HMAC", key, data);
  const hash = btoa(String.fromCharCode(...new Uint8Array(signature))).replace(/=+$/, "");
  return value + "." + hash;
};
var unsign = async (cookie, secret) => {
  const value = cookie.slice(0, cookie.lastIndexOf("."));
  const hash = cookie.slice(cookie.lastIndexOf(".") + 1);
  const data = encoder.encode(value);
  const key = await createKey(secret, ["verify"]);
  const signature = byteStringToUint8Array(atob(hash));
  const valid = await crypto.subtle.verify("HMAC", key, signature, data);
  return valid ? value : false;
};
async function createKey(secret, usages) {
  const key = await crypto.subtle.importKey(
    "raw",
    encoder.encode(secret),
    { name: "HMAC", hash: "SHA-256" },
    false,
    usages
  );
  return key;
}
function byteStringToUint8Array(byteString) {
  const array = new Uint8Array(byteString.length);
  for (let i = 0; i < byteString.length; i++) {
    array[i] = byteString.charCodeAt(i);
  }
  return array;
}

// src/implementations.ts
var createCookie = createCookieFactory({ sign, unsign });
var createCookieSessionStorage = createCookieSessionStorageFactory(createCookie);
var createSessionStorage = createSessionStorageFactory(createCookie);
var createMemorySessionStorage = createMemorySessionStorageFactory(createSessionStorage);

// src/index.ts
import {
  createRequestHandler,
  broadcastDevReady,
  createSession,
  defer,
  isCookie,
  isSession,
  json,
  logDevReady,
  MaxPartSizeExceededError,
  redirect,
  redirectDocument,
  unstable_composeUploadHandlers,
  unstable_createMemoryUploadHandler,
  unstable_parseMultipartFormData,
  unstable_setDevServerHooks,
  UNSAFE_SingleFetchRedirectSymbol
} from "@remix-run/server-runtime";
export {
  MaxPartSizeExceededError,
  UNSAFE_SingleFetchRedirectSymbol,
  broadcastDevReady,
  createCookie,
  createCookieSessionStorage,
  createMemorySessionStorage,
  createRequestHandler,
  createSession,
  createSessionStorage,
  defer,
  isCookie,
  isSession,
  json,
  logDevReady,
  redirect,
  redirectDocument,
  unstable_composeUploadHandlers,
  unstable_createMemoryUploadHandler,
  unstable_parseMultipartFormData,
  unstable_setDevServerHooks
};
