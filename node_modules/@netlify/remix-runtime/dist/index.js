"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  MaxPartSizeExceededError: () => import_server_runtime2.MaxPartSizeExceededError,
  UNSAFE_SingleFetchRedirectSymbol: () => import_server_runtime2.UNSAFE_SingleFetchRedirectSymbol,
  broadcastDevReady: () => import_server_runtime2.broadcastDevReady,
  createCookie: () => createCookie,
  createCookieSessionStorage: () => createCookieSessionStorage,
  createMemorySessionStorage: () => createMemorySessionStorage,
  createRequestHandler: () => import_server_runtime2.createRequestHandler,
  createSession: () => import_server_runtime2.createSession,
  createSessionStorage: () => createSessionStorage,
  defer: () => import_server_runtime2.defer,
  isCookie: () => import_server_runtime2.isCookie,
  isSession: () => import_server_runtime2.isSession,
  json: () => import_server_runtime2.json,
  logDevReady: () => import_server_runtime2.logDevReady,
  redirect: () => import_server_runtime2.redirect,
  redirectDocument: () => import_server_runtime2.redirectDocument,
  unstable_composeUploadHandlers: () => import_server_runtime2.unstable_composeUploadHandlers,
  unstable_createMemoryUploadHandler: () => import_server_runtime2.unstable_createMemoryUploadHandler,
  unstable_parseMultipartFormData: () => import_server_runtime2.unstable_parseMultipartFormData,
  unstable_setDevServerHooks: () => import_server_runtime2.unstable_setDevServerHooks
});
module.exports = __toCommonJS(src_exports);

// src/implementations.ts
var import_server_runtime = require("@remix-run/server-runtime");

// src/crypto.ts
var encoder = new TextEncoder();
var sign = async (value, secret) => {
  const data = encoder.encode(value);
  const key = await createKey(secret, ["sign"]);
  const signature = await crypto.subtle.sign("HMAC", key, data);
  const hash = btoa(String.fromCharCode(...new Uint8Array(signature))).replace(/=+$/, "");
  return value + "." + hash;
};
var unsign = async (cookie, secret) => {
  const value = cookie.slice(0, cookie.lastIndexOf("."));
  const hash = cookie.slice(cookie.lastIndexOf(".") + 1);
  const data = encoder.encode(value);
  const key = await createKey(secret, ["verify"]);
  const signature = byteStringToUint8Array(atob(hash));
  const valid = await crypto.subtle.verify("HMAC", key, signature, data);
  return valid ? value : false;
};
async function createKey(secret, usages) {
  const key = await crypto.subtle.importKey(
    "raw",
    encoder.encode(secret),
    { name: "HMAC", hash: "SHA-256" },
    false,
    usages
  );
  return key;
}
function byteStringToUint8Array(byteString) {
  const array = new Uint8Array(byteString.length);
  for (let i = 0; i < byteString.length; i++) {
    array[i] = byteString.charCodeAt(i);
  }
  return array;
}

// src/implementations.ts
var createCookie = (0, import_server_runtime.createCookieFactory)({ sign, unsign });
var createCookieSessionStorage = (0, import_server_runtime.createCookieSessionStorageFactory)(createCookie);
var createSessionStorage = (0, import_server_runtime.createSessionStorageFactory)(createCookie);
var createMemorySessionStorage = (0, import_server_runtime.createMemorySessionStorageFactory)(createSessionStorage);

// src/index.ts
var import_server_runtime2 = require("@remix-run/server-runtime");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MaxPartSizeExceededError,
  UNSAFE_SingleFetchRedirectSymbol,
  broadcastDevReady,
  createCookie,
  createCookieSessionStorage,
  createMemorySessionStorage,
  createRequestHandler,
  createSession,
  createSessionStorage,
  defer,
  isCookie,
  isSession,
  json,
  logDevReady,
  redirect,
  redirectDocument,
  unstable_composeUploadHandlers,
  unstable_createMemoryUploadHandler,
  unstable_parseMultipartFormData,
  unstable_setDevServerHooks
});
